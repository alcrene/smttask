from xxhash import xxh32, xxh64



def stablehash(o: bytes|str) -> xxh64:
    return xxh64(o)

def stablehexdigest(o: bytes|str) -> str:
    return xx64(o).hexdigest()

def stablebytesdigest(o: bytes|str) -> bytes:
    return xx64(o).digest()

def stableintdigest(o: bytes|str, byte_len=4) -> int:
    """
    Note that `byte_len` does not directly truncate the generated bytes,
    but selects the algorithm:
      - `byte_len ⩽ 4 → xx32 → 32-bit integer
      - `byte_len > 4 → xx64 → 64-bit integer
    Since there is not much point in truncating the byte length post-hoc,
    there are only two possible lengths for the returned integer
    """
    return xx32(o).intdigest() if byte_len <= 4 else xx64(o).intdigest()